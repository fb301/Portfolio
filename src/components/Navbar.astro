---
interface NavItem {
  label: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    label: "Home",
    href: "/#home",
    icon: "",
  },
  {
    label: "Projects",
    href: "/#projects",
    icon: "",
  },
  {
    label: "Contact",
    href: "/#contact",
    icon: "",
  },
];

const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1);
---

<nav class='z-[100] md:top-6 md:bottom-auto bottom-0'>
  <div class='nav-grabber' id='grabber'>
    <div class='container mx-auto flex justify-center items-center p-3'>
      <ul
        class='flex w-full justify-between md:space-x-6 md:justify-center md:gap-12 gap-6'
      >
        {
          navItems.map((navItem) => (
            <li>
              <a
                href={navItem.href}
                class={currentPath == navItem.href ? "active" : ""}
              >
                {navItem.label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</nav>

<style>
  a {
    color: #f4f4f4;
    font-weight: 700;
    text-shadow: 2px 2px 0px #000000;
  }

  .nav-grabber {
    min-width: 500px;
    transition: 300ms ease;
    left: calc(1 / 2 * 100%);
    justify-content: center;
    position: fixed;
    translate: calc(calc(1 / 2 * 100%) /* 50% */ * -1);
  }

  nav {
    min-width: 500px;
    transition: 300ms ease;
    left: calc(1 / 2 * 100%);
    justify-content: center;
    position: fixed;
    translate: calc(calc(1 / 2 * 100%) /* 50% */ * -1);
  }

  .sticking {
    --border-width: 2px;
    width: 200%;
    border-radius: 3rem;
    backdrop-filter: blur(12px) brightness(90%) saturate(120%);
    transition: 400ms ease;
  }

  .sticking::before {
    position: absolute;
    content: "";
    z-index: -1;
    inset: 0;
    border-radius: inherit;
    border: var(--border-width) solid transparent;
    background: rgba(255, 255, 255, 0.185) border-box;
    mask:
      radial-gradient(black, black) border-box,
      radial-gradient(black, black) padding-box;
    mask-composite: subtract;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const cssElement = document.getElementById("grabber");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          console.log(entry);
          const ratio = entry.intersectionRatio;
          if (cssElement) {
            console.log(ratio);
            cssElement.style.width = `${Math.round(ratio * 200)}%`;
          }

          if (ratio != 1) {
            cssElement?.classList.add("sticking");
          } else {
            cssElement?.classList.remove("sticking");
          }
        });
      },
      {
        threshold: Array.from({ length: 1000 }, (_, i) => i / 1000),
      },
    );

    const box = document.getElementById("hallo");
    if (box) {
      observer.observe(box);
    }
  });
</script>
