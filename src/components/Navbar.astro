---
interface NavItem {
  label: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    label: "Home",
    href: "#home",
    icon: "",
  },
  {
    label: "Projects",
    href: "#projects",
    icon: "",
  },
  {
    label: "Contact",
    href: "#contact",
    icon: "",
  },
];

const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1);
---

<div class='flex justify-center w-full'>
  <nav
    class='header fixed left-1/2 -translate-x-1/2 z-[100] md:top-6 md:bottom-auto bottom-0'
    id='grabber'
  >
    <div class='container mx-auto flex justify-center items-center p-3'>
      <ul
        class='flex w-full justify-between md:space-x-6 md:justify-center md:gap-12 gap-6'
      >
        {
          navItems.map((navItem) => (
            <li>
              <a
                href={navItem.href}
                class={currentPath == navItem.href ? "active" : ""}
              >
                {navItem.label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</div>

<style>
  :root {
    --primary-1: hsla(250, 4%, 31%, 0.212);
    --primary-2: hsla(260, 4%, 41%, 0.185);
    --border-1: hsla(0, 3%, 46%, 0.25);
    --border-2: hsla(0, 3%, 46%, 0.25);
  }

  a {
    color: #f9f6ee;
    font-weight: 666;
    text-shadow: 2px 2px 0px #1b1212;
  }

  nav a:active {
    color: aliceblue !important;
  }

  a[aria-current="page"] {
    color: white !important;
    font-weight: bold;
  }

  .header {
    width: 52%;
    min-width: 424px;
    transition: 400ms;
  }

  .sticking {
    --border-width: 2px;
    border-radius: 3rem;
    backdrop-filter: blur(12px) brightness(90%) saturate(120%);
  }

  .sticking::before {
    position: absolute;
    content: "";
    z-index: -1;
    inset: 0;
    border-radius: inherit;
    border: var(--border-width) solid transparent;
    /* backdrop-filter: brightness(180%) saturate(120%); */
    background: radial-gradient(var(--border-1), var(--border-2)) border-box;
    mask:
      radial-gradient(black, black) border-box,
      radial-gradient(black, black) padding-box;
    mask-composite: subtract;
  }
</style>

<script>
  const cssElement = document.getElementById("grabber");
  const primaryHeader = document.querySelector(".header");

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        console.log(entry);
        const ratio = entry.intersectionRatio;
        if (cssElement) {
          cssElement.style.width = `${Math.round(ratio * 100)}%`;
        }

        if (ratio != 1) {
          primaryHeader?.classList.add("sticking");
        } else {
          cssElement?.classList.remove("sticking");
        }
      });
    },
    {
      threshold: Array.from({ length: 1000 }, (_, i) => i / 1000),
    },
  );

  const box = document.getElementById("hallo");
  if (box) {
    observer.observe(box);
  }
</script>
